// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Status.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// ====================== //
/// Status                 //
public struct CustomStatus {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var text: String = String()

  public var emojiID: UInt64 = 0

  public var emojiName: String = String()

  public var expiresAtMs: UInt64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// ====== COMPLETE ====== //
public struct StatusSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _status ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  public var customStatus: CustomStatus {
    get {return _customStatus ?? CustomStatus()}
    set {_customStatus = newValue}
  }
  /// Returns true if `customStatus` has been explicitly set.
  public var hasCustomStatus: Bool {return self._customStatus != nil}
  /// Clears the value of `customStatus`. Subsequent reads from it will return its default value.
  public mutating func clearCustomStatus() {self._customStatus = nil}

  public var showCurrentGame: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _showCurrentGame ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_showCurrentGame = newValue}
  }
  /// Returns true if `showCurrentGame` has been explicitly set.
  public var hasShowCurrentGame: Bool {return self._showCurrentGame != nil}
  /// Clears the value of `showCurrentGame`. Subsequent reads from it will return its default value.
  public mutating func clearShowCurrentGame() {self._showCurrentGame = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _status: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _customStatus: CustomStatus? = nil
  fileprivate var _showCurrentGame: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension CustomStatus: @unchecked Sendable {}
extension StatusSettings: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension CustomStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "CustomStatus"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "text"),
    2: .standard(proto: "emoji_id"),
    3: .standard(proto: "emoji_name"),
    4: .standard(proto: "expires_at_ms"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.text) }()
      case 2: try { try decoder.decodeSingularFixed64Field(value: &self.emojiID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.emojiName) }()
      case 4: try { try decoder.decodeSingularFixed64Field(value: &self.expiresAtMs) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 1)
    }
    if self.emojiID != 0 {
      try visitor.visitSingularFixed64Field(value: self.emojiID, fieldNumber: 2)
    }
    if !self.emojiName.isEmpty {
      try visitor.visitSingularStringField(value: self.emojiName, fieldNumber: 3)
    }
    if self.expiresAtMs != 0 {
      try visitor.visitSingularFixed64Field(value: self.expiresAtMs, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: CustomStatus, rhs: CustomStatus) -> Bool {
    if lhs.text != rhs.text {return false}
    if lhs.emojiID != rhs.emojiID {return false}
    if lhs.emojiName != rhs.emojiName {return false}
    if lhs.expiresAtMs != rhs.expiresAtMs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension StatusSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "StatusSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .standard(proto: "custom_status"),
    3: .standard(proto: "show_current_game"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._status) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._customStatus) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._showCurrentGame) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._customStatus {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._showCurrentGame {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: StatusSettings, rhs: StatusSettings) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs._customStatus != rhs._customStatus {return false}
    if lhs._showCurrentGame != rhs._showCurrentGame {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
