// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: FavoriteChannel.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum FavoriteChannelType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unsetFavoriteChannelType // = 0
  case referenceOriginal // = 1
  case category // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .unsetFavoriteChannelType
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unsetFavoriteChannelType
    case 1: self = .referenceOriginal
    case 2: self = .category
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unsetFavoriteChannelType: return 0
    case .referenceOriginal: return 1
    case .category: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension FavoriteChannelType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [FavoriteChannelType] = [
    .unsetFavoriteChannelType,
    .referenceOriginal,
    .category,
  ]
}

#endif  // swift(>=4.2)

public struct Favorites {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var favoriteChannels: Dictionary<UInt64,FavoriteChannel> = [:]

  public var muted: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct FavoriteChannel {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var nickname: String = String()

  public var type: FavoriteChannelType = .unsetFavoriteChannelType

  public var position: UInt32 = 0

  public var parentID: UInt64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension FavoriteChannelType: @unchecked Sendable {}
extension Favorites: @unchecked Sendable {}
extension FavoriteChannel: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension FavoriteChannelType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSET_FAVORITE_CHANNEL_TYPE"),
    1: .same(proto: "REFERENCE_ORIGINAL"),
    2: .same(proto: "CATEGORY"),
  ]
}

extension Favorites: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "Favorites"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "favorite_channels"),
    2: .same(proto: "muted"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufFixed64,FavoriteChannel>.self, value: &self.favoriteChannels) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.muted) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.favoriteChannels.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufFixed64,FavoriteChannel>.self, value: self.favoriteChannels, fieldNumber: 1)
    }
    if self.muted != false {
      try visitor.visitSingularBoolField(value: self.muted, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Favorites, rhs: Favorites) -> Bool {
    if lhs.favoriteChannels != rhs.favoriteChannels {return false}
    if lhs.muted != rhs.muted {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension FavoriteChannel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "FavoriteChannel"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "nickname"),
    2: .same(proto: "type"),
    3: .same(proto: "position"),
    4: .standard(proto: "parent_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.nickname) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.position) }()
      case 4: try { try decoder.decodeSingularFixed64Field(value: &self.parentID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.nickname.isEmpty {
      try visitor.visitSingularStringField(value: self.nickname, fieldNumber: 1)
    }
    if self.type != .unsetFavoriteChannelType {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 2)
    }
    if self.position != 0 {
      try visitor.visitSingularUInt32Field(value: self.position, fieldNumber: 3)
    }
    if self.parentID != 0 {
      try visitor.visitSingularFixed64Field(value: self.parentID, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: FavoriteChannel, rhs: FavoriteChannel) -> Bool {
    if lhs.nickname != rhs.nickname {return false}
    if lhs.type != rhs.type {return false}
    if lhs.position != rhs.position {return false}
    if lhs.parentID != rhs.parentID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
