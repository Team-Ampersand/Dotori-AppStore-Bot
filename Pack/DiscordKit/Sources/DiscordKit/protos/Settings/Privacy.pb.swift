// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Settings/Privacy.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum GuildActivityStatusRestrictionDefault: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case off // = 0

  /// No idea what these options mean
  case onForLargeGuilds // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .off
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .off
    case 1: self = .onForLargeGuilds
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .off: return 0
    case .onForLargeGuilds: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension GuildActivityStatusRestrictionDefault: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [GuildActivityStatusRestrictionDefault] = [
    .off,
    .onForLargeGuilds,
  ]
}

#endif  // swift(>=4.2)

public struct PrivacySettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var allowActivityPartyPrivacyFriends: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _allowActivityPartyPrivacyFriends ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_allowActivityPartyPrivacyFriends = newValue}
  }
  /// Returns true if `allowActivityPartyPrivacyFriends` has been explicitly set.
  public var hasAllowActivityPartyPrivacyFriends: Bool {return self._allowActivityPartyPrivacyFriends != nil}
  /// Clears the value of `allowActivityPartyPrivacyFriends`. Subsequent reads from it will return its default value.
  public mutating func clearAllowActivityPartyPrivacyFriends() {self._allowActivityPartyPrivacyFriends = nil}

  public var allowActivityPartyPrivacyVoiceChannel: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _allowActivityPartyPrivacyVoiceChannel ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_allowActivityPartyPrivacyVoiceChannel = newValue}
  }
  /// Returns true if `allowActivityPartyPrivacyVoiceChannel` has been explicitly set.
  public var hasAllowActivityPartyPrivacyVoiceChannel: Bool {return self._allowActivityPartyPrivacyVoiceChannel != nil}
  /// Clears the value of `allowActivityPartyPrivacyVoiceChannel`. Subsequent reads from it will return its default value.
  public mutating func clearAllowActivityPartyPrivacyVoiceChannel() {self._allowActivityPartyPrivacyVoiceChannel = nil}

  public var restrictedGuildIds: [UInt64] = []

  public var defaultGuildsRestricted: Bool = false

  /// No, the jump is not an error
  public var allowAccessibilityDetection: Bool = false

  public var detectPlatformAccounts: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _detectPlatformAccounts ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_detectPlatformAccounts = newValue}
  }
  /// Returns true if `detectPlatformAccounts` has been explicitly set.
  public var hasDetectPlatformAccounts: Bool {return self._detectPlatformAccounts != nil}
  /// Clears the value of `detectPlatformAccounts`. Subsequent reads from it will return its default value.
  public mutating func clearDetectPlatformAccounts() {self._detectPlatformAccounts = nil}

  public var passwordless: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _passwordless ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_passwordless = newValue}
  }
  /// Returns true if `passwordless` has been explicitly set.
  public var hasPasswordless: Bool {return self._passwordless != nil}
  /// Clears the value of `passwordless`. Subsequent reads from it will return its default value.
  public mutating func clearPasswordless() {self._passwordless = nil}

  public var contactSyncEnabled: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _contactSyncEnabled ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_contactSyncEnabled = newValue}
  }
  /// Returns true if `contactSyncEnabled` has been explicitly set.
  public var hasContactSyncEnabled: Bool {return self._contactSyncEnabled != nil}
  /// Clears the value of `contactSyncEnabled`. Subsequent reads from it will return its default value.
  public mutating func clearContactSyncEnabled() {self._contactSyncEnabled = nil}

  public var friendSourceFlags: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _friendSourceFlags ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_friendSourceFlags = newValue}
  }
  /// Returns true if `friendSourceFlags` has been explicitly set.
  public var hasFriendSourceFlags: Bool {return self._friendSourceFlags != nil}
  /// Clears the value of `friendSourceFlags`. Subsequent reads from it will return its default value.
  public mutating func clearFriendSourceFlags() {self._friendSourceFlags = nil}

  public var friendDiscoveryFlags: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _friendDiscoveryFlags ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_friendDiscoveryFlags = newValue}
  }
  /// Returns true if `friendDiscoveryFlags` has been explicitly set.
  public var hasFriendDiscoveryFlags: Bool {return self._friendDiscoveryFlags != nil}
  /// Clears the value of `friendDiscoveryFlags`. Subsequent reads from it will return its default value.
  public mutating func clearFriendDiscoveryFlags() {self._friendDiscoveryFlags = nil}

  public var activityRestrictedGuildIds: [UInt64] = []

  public var defaultGuildsActivityRestricted: GuildActivityStatusRestrictionDefault = .off

  public var activityJoiningRestrictedGuildIds: [UInt64] = []

  public var messageRequestRestrictedGuildIds: [UInt64] = []

  public var defaultMessageRequestRestricted: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _defaultMessageRequestRestricted ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_defaultMessageRequestRestricted = newValue}
  }
  /// Returns true if `defaultMessageRequestRestricted` has been explicitly set.
  public var hasDefaultMessageRequestRestricted: Bool {return self._defaultMessageRequestRestricted != nil}
  /// Clears the value of `defaultMessageRequestRestricted`. Subsequent reads from it will return its default value.
  public mutating func clearDefaultMessageRequestRestricted() {self._defaultMessageRequestRestricted = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _allowActivityPartyPrivacyFriends: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
  fileprivate var _allowActivityPartyPrivacyVoiceChannel: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
  fileprivate var _detectPlatformAccounts: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
  fileprivate var _passwordless: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
  fileprivate var _contactSyncEnabled: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
  fileprivate var _friendSourceFlags: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
  fileprivate var _friendDiscoveryFlags: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
  fileprivate var _defaultMessageRequestRestricted: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension GuildActivityStatusRestrictionDefault: @unchecked Sendable {}
extension PrivacySettings: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension GuildActivityStatusRestrictionDefault: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OFF"),
    1: .same(proto: "ON_FOR_LARGE_GUILDS"),
  ]
}

extension PrivacySettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "PrivacySettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "allow_activity_party_privacy_friends"),
    2: .standard(proto: "allow_activity_party_privacy_voice_channel"),
    3: .standard(proto: "restricted_guild_ids"),
    4: .standard(proto: "default_guilds_restricted"),
    7: .standard(proto: "allow_accessibility_detection"),
    8: .standard(proto: "detect_platform_accounts"),
    9: .same(proto: "passwordless"),
    10: .standard(proto: "contact_sync_enabled"),
    11: .standard(proto: "friend_source_flags"),
    12: .standard(proto: "friend_discovery_flags"),
    13: .standard(proto: "activity_restricted_guild_ids"),
    14: .standard(proto: "default_guilds_activity_restricted"),
    15: .standard(proto: "activity_joining_restricted_guild_ids"),
    16: .standard(proto: "message_request_restricted_guild_ids"),
    17: .standard(proto: "default_message_request_restricted"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._allowActivityPartyPrivacyFriends) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._allowActivityPartyPrivacyVoiceChannel) }()
      case 3: try { try decoder.decodeRepeatedFixed64Field(value: &self.restrictedGuildIds) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.defaultGuildsRestricted) }()
      case 7: try { try decoder.decodeSingularBoolField(value: &self.allowAccessibilityDetection) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._detectPlatformAccounts) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &self._passwordless) }()
      case 10: try { try decoder.decodeSingularMessageField(value: &self._contactSyncEnabled) }()
      case 11: try { try decoder.decodeSingularMessageField(value: &self._friendSourceFlags) }()
      case 12: try { try decoder.decodeSingularMessageField(value: &self._friendDiscoveryFlags) }()
      case 13: try { try decoder.decodeRepeatedFixed64Field(value: &self.activityRestrictedGuildIds) }()
      case 14: try { try decoder.decodeSingularEnumField(value: &self.defaultGuildsActivityRestricted) }()
      case 15: try { try decoder.decodeRepeatedFixed64Field(value: &self.activityJoiningRestrictedGuildIds) }()
      case 16: try { try decoder.decodeRepeatedFixed64Field(value: &self.messageRequestRestrictedGuildIds) }()
      case 17: try { try decoder.decodeSingularMessageField(value: &self._defaultMessageRequestRestricted) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._allowActivityPartyPrivacyFriends {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._allowActivityPartyPrivacyVoiceChannel {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.restrictedGuildIds.isEmpty {
      try visitor.visitPackedFixed64Field(value: self.restrictedGuildIds, fieldNumber: 3)
    }
    if self.defaultGuildsRestricted != false {
      try visitor.visitSingularBoolField(value: self.defaultGuildsRestricted, fieldNumber: 4)
    }
    if self.allowAccessibilityDetection != false {
      try visitor.visitSingularBoolField(value: self.allowAccessibilityDetection, fieldNumber: 7)
    }
    try { if let v = self._detectPlatformAccounts {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    try { if let v = self._passwordless {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    } }()
    try { if let v = self._contactSyncEnabled {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    } }()
    try { if let v = self._friendSourceFlags {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    } }()
    try { if let v = self._friendDiscoveryFlags {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    } }()
    if !self.activityRestrictedGuildIds.isEmpty {
      try visitor.visitPackedFixed64Field(value: self.activityRestrictedGuildIds, fieldNumber: 13)
    }
    if self.defaultGuildsActivityRestricted != .off {
      try visitor.visitSingularEnumField(value: self.defaultGuildsActivityRestricted, fieldNumber: 14)
    }
    if !self.activityJoiningRestrictedGuildIds.isEmpty {
      try visitor.visitPackedFixed64Field(value: self.activityJoiningRestrictedGuildIds, fieldNumber: 15)
    }
    if !self.messageRequestRestrictedGuildIds.isEmpty {
      try visitor.visitPackedFixed64Field(value: self.messageRequestRestrictedGuildIds, fieldNumber: 16)
    }
    try { if let v = self._defaultMessageRequestRestricted {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PrivacySettings, rhs: PrivacySettings) -> Bool {
    if lhs._allowActivityPartyPrivacyFriends != rhs._allowActivityPartyPrivacyFriends {return false}
    if lhs._allowActivityPartyPrivacyVoiceChannel != rhs._allowActivityPartyPrivacyVoiceChannel {return false}
    if lhs.restrictedGuildIds != rhs.restrictedGuildIds {return false}
    if lhs.defaultGuildsRestricted != rhs.defaultGuildsRestricted {return false}
    if lhs.allowAccessibilityDetection != rhs.allowAccessibilityDetection {return false}
    if lhs._detectPlatformAccounts != rhs._detectPlatformAccounts {return false}
    if lhs._passwordless != rhs._passwordless {return false}
    if lhs._contactSyncEnabled != rhs._contactSyncEnabled {return false}
    if lhs._friendSourceFlags != rhs._friendSourceFlags {return false}
    if lhs._friendDiscoveryFlags != rhs._friendDiscoveryFlags {return false}
    if lhs.activityRestrictedGuildIds != rhs.activityRestrictedGuildIds {return false}
    if lhs.defaultGuildsActivityRestricted != rhs.defaultGuildsActivityRestricted {return false}
    if lhs.activityJoiningRestrictedGuildIds != rhs.activityJoiningRestrictedGuildIds {return false}
    if lhs.messageRequestRestrictedGuildIds != rhs.messageRequestRestrictedGuildIds {return false}
    if lhs._defaultMessageRequestRestricted != rhs._defaultMessageRequestRestricted {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
