// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Settings/Inbox.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// ====== Inbox ====== //
public enum InboxTab: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unspecified // = 0
  case mentions // = 1
  case unreads // = 2
  case todos // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .mentions
    case 2: self = .unreads
    case 3: self = .todos
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .mentions: return 1
    case .unreads: return 2
    case .todos: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension InboxTab: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [InboxTab] = [
    .unspecified,
    .mentions,
    .unreads,
    .todos,
  ]
}

#endif  // swift(>=4.2)

public struct InboxSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var currentTab: InboxTab = .unspecified

  public var viewedTutorial: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension InboxTab: @unchecked Sendable {}
extension InboxSettings: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension InboxTab: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSPECIFIED"),
    1: .same(proto: "MENTIONS"),
    2: .same(proto: "UNREADS"),
    3: .same(proto: "TODOS"),
  ]
}

extension InboxSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "InboxSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "current_tab"),
    2: .standard(proto: "viewed_tutorial"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.currentTab) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.viewedTutorial) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.currentTab != .unspecified {
      try visitor.visitSingularEnumField(value: self.currentTab, fieldNumber: 1)
    }
    if self.viewedTutorial != false {
      try visitor.visitSingularBoolField(value: self.viewedTutorial, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: InboxSettings, rhs: InboxSettings) -> Bool {
    if lhs.currentTab != rhs.currentTab {return false}
    if lhs.viewedTutorial != rhs.viewedTutorial {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
