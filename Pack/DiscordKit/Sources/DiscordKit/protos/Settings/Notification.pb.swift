// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Settings/Notification.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct NotificationSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var showInAppNotifications: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _showInAppNotifications ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_showInAppNotifications = newValue}
  }
  /// Returns true if `showInAppNotifications` has been explicitly set.
  public var hasShowInAppNotifications: Bool {return self._showInAppNotifications != nil}
  /// Clears the value of `showInAppNotifications`. Subsequent reads from it will return its default value.
  public mutating func clearShowInAppNotifications() {self._showInAppNotifications = nil}

  public var notifyFriendsOnGoLive: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _notifyFriendsOnGoLive ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_notifyFriendsOnGoLive = newValue}
  }
  /// Returns true if `notifyFriendsOnGoLive` has been explicitly set.
  public var hasNotifyFriendsOnGoLive: Bool {return self._notifyFriendsOnGoLive != nil}
  /// Clears the value of `notifyFriendsOnGoLive`. Subsequent reads from it will return its default value.
  public mutating func clearNotifyFriendsOnGoLive() {self._notifyFriendsOnGoLive = nil}

  public var notificationCenterAckedBeforeID: UInt64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _showInAppNotifications: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
  fileprivate var _notifyFriendsOnGoLive: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension NotificationSettings: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension NotificationSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "NotificationSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "show_in_app_notifications"),
    2: .standard(proto: "notify_friends_on_go_live"),
    3: .standard(proto: "notification_center_acked_before_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._showInAppNotifications) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._notifyFriendsOnGoLive) }()
      case 3: try { try decoder.decodeSingularFixed64Field(value: &self.notificationCenterAckedBeforeID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._showInAppNotifications {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._notifyFriendsOnGoLive {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if self.notificationCenterAckedBeforeID != 0 {
      try visitor.visitSingularFixed64Field(value: self.notificationCenterAckedBeforeID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: NotificationSettings, rhs: NotificationSettings) -> Bool {
    if lhs._showInAppNotifications != rhs._showInAppNotifications {return false}
    if lhs._notifyFriendsOnGoLive != rhs._notifyFriendsOnGoLive {return false}
    if lhs.notificationCenterAckedBeforeID != rhs.notificationCenterAckedBeforeID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
